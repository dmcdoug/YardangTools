# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2021-05-28 14:19:32
"""
import arcpy, os
from sys import argv

# Disable large xml log files for each shapefile. Requires ArcGIS Pro >10.8
try:
    if arcpy.GetLogMetadata():
        arcpy.SetLogMetadata(False)
    if arcpy.GetLogHistory():
        arcpy.SetLogHistory(False)
except:
        pass

#def #  NOT  IMPLEMENTED# Function Body not implemented
def absMinCurvFunc(b):
    c, = next(row for row in arcpy.da.SearchCursor(b,'CURV_PCT2'))
    return -c
#def #  NOT  IMPLEMENTED# Function Body not implemented
#def #  NOT  IMPLEMENTED# Function Body not implemented
def label_0curv_Func(b,c,d):
    e = 0
    for row in arcpy.da.SearchCursor(b,['OID','ORIG__'+d]):
        if e>=c:
            break
        e = e+row[1]
    return row[0]
def HeightFunc(b,sumElev_lt0curv):
    MinElev, = next(row for row in arcpy.da.SearchCursor(b,'MIN'))
    MaxElev, = next(row for row in arcpy.da.SearchCursor(b,'MAX'))
    return MinElev+(sumElev_lt0curv*((MaxElev-MinElev)/255))
def updateHeight(b,c,d):
    with arcpy.da.UpdateCursor(b,'eP_Height','ORIG_FID='+str(c)) as cursor:
        for row in cursor:
            row[0] = d
            cursor.updateRow(row)
            break
        del cursor
    return 1
#def #  NOT  IMPLEMENTED# Function Body not implemented
def breakloopfnc(in_values, condition) :
  for cnd in in_values:
    if ((not cnd) and bool(condition)) or (cnd and (not bool(condition))):
      return False 
  return True 


def ZonHistIterator(I_curvPolygs_ORIG_FID, Curvature_Raster, Input_Raster_or_Mosaic_Dataset, scratch):  # ZonHistIterator
    
    # Set Workspaces (important due to unconfigurable intermediate files on raster operations)
    arcpy.EnvManager(scratchWorkspace=scratch, workspace=scratch)
    
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")

    String = "Double"

    #for oid in range(1,int(arcpy.management.GetCount(curvPolygs).getOutput(0))+1):#I_curvPolygs_ORIG_FID, Value in #  NOT  IMPLEMENTED(curvPolygs, [[output_value_2_, ""]], False):

    #I_curvPolygs_ORIG_FID = arcpy.management.MakeFeatureLayer(curvPolygs,os.path.join(scratch,fr"I_curvPolygs_{oid}"),'objectid='+str(oid))
    Value, = next(row for row in arcpy.da.SearchCursor(I_curvPolygs_ORIG_FID,'ORIG_FID'))
    # Process: Calculate Value (6) (Calculate Value) ()
    output_value_2_ = r"ORIG_FID"

    # Process: Extract by Mask (Extract by Mask) (sa)
    Extract_Conv1 = os.path.join(scratch, fr"Extract_Conv_{Value}.tif")
    Extract_by_Mask = Extract_Conv1
    Extract_Conv1 = arcpy.sa.ExtractByMask(in_raster=Curvature_Raster, in_mask_data=I_curvPolygs_ORIG_FID)
    Extract_Conv1.save(Extract_by_Mask)

    # Process: Get_Field_Value_4_ (Get Field Value) 
    # Get Field Value Utility is not implemented 
    MaxCurv, = next(row for row in arcpy.da.SearchCursor(I_curvPolygs_ORIG_FID,'CURV_PCT98'))

    # Process: Calculate Value (5) (Calculate Value) ()
    if I_curvPolygs_ORIG_FID:
        absMinCurv = absMinCurvFunc(I_curvPolygs_ORIG_FID)

    # Process: Calculate Value (3) (Calculate Value) ()
    #if I_curvPolygs_ORIG_FID and MaxCurv and absMinCurv:
    #    output_value = f'VALUE >= -{absMinCurv} And VALUE <= {MaxCurv}'

    # Process: Extract by Attributes (Extract by Attributes) (sa) # Not necessary anyways, but you should have used a boolean Raster Calculator expression with con() instead of SQL
    Extract_Extr1 = os.path.join(scratch, fr"Extract_Extr1_{Value}.tif")
    #Extract_by_Attributes = Extract_Extr1
    #if I_curvPolygs_ORIG_FID and MaxCurv and absMinCurv:
    #    Extract_Extr1 = arcpy.sa.ExtractByAttributes(in_raster=Extract_Conv1, where_clause=output_value)
    #    Extract_Extr1.save(Extract_by_Attributes)
        
    # Process: Zonal Histogram (Zonal Histogram) (sa)
    ZonalHi_curvPol1 = os.path.join(scratch, fr"ZonalHi_curvPol1_{Value}.dbf")
    Output_graph_name = ""
    if I_curvPolygs_ORIG_FID and MaxCurv and absMinCurv:
        arcpy.sa.ZonalHistogram(in_zone_data=I_curvPolygs_ORIG_FID, zone_field=output_value_2_, in_value_raster=Extract_Conv1, out_table=ZonalHi_curvPol1, out_graph=Output_graph_name, zones_as_rows="ZONES_AS_FIELDS")

    # Process: Calculate Value (Calculate Value) ()
    if I_curvPolygs_ORIG_FID and MaxCurv and absMinCurv:
        _0_label = absMinCurv/((MaxCurv+absMinCurv)/255)

    # Process: If Field Exists (If Field Exists) () #  NOT  IMPLEMENTED(in_table=ZonalHi_curvPol1, field_test_type="MUST_HAVE_ALL_FIELDS", field=[f"ORIG__{str(Value)[:4]}"])
    if I_curvPolygs_ORIG_FID and MaxCurv and absMinCurv:
        if arcpy.ListFields(ZonalHi_curvPol1,f"ORIG__{str(Value)[:4]}"): 
            True_3_, False_3_ = [True,False]
        else:
            True_3_, False_3_ = [False,True]
            arcpy.management.Delete([Extract_Conv1, Extract_Extr1])
            del Extract_Conv1, Extract_Extr1
            arcpy.management.Delete(ZonalHi_curvPol1)
            del ZonalHi_curvPol1
            return ()

    # Process: Select Layer By Attribute (Select Layer By Attribute) (management)
    if I_curvPolygs_ORIG_FID and MaxCurv and True_3_ and _0_label and absMinCurv:
        #ZonalHi_curvPol2_View, Count_lt0 = arcpy.management.SelectLayerByAttribute(in_layer_or_view=ZonalHi_curvPol1, selection_type="NEW_SELECTION", where_clause=f"OID <= {_0_label}", invert_where_clause="")
        ZonalHi_curvPol2 = os.path.join(scratch, fr"ZonalHi_curvPol2_{Value}.dbf")
        #Select_ZonalHi = ZonalHi_curvPol2
        arcpy.analysis.TableSelect(ZonalHi_curvPol1,ZonalHi_curvPol2,f"OID <= {_0_label}")
        #Select_ZonalHi.save(ZonalHi_curvPol2)
    
    # Process: Extract by Mask (2) (Extract by Mask) (sa)
    Extract_Minu1 = os.path.join(scratch, fr"Extract_Minu1_{Value}.tif")
    Extract_by_Mask_2_ = Extract_Minu1
    Extract_Minu1 = arcpy.sa.ExtractByMask(in_raster=Input_Raster_or_Mosaic_Dataset, in_mask_data=I_curvPolygs_ORIG_FID)
    Extract_Minu1.save(Extract_by_Mask_2_)

    # Process: Zonal Histogram (2) (Zonal Histogram) (sa)
    ZonalHi_curvPol_elev = os.path.join(scratch, fr"ZonalHi_curvPol_elev_{Value}.dbf")
    Output_graph_name_2_ = ""
    arcpy.sa.ZonalHistogram(in_zone_data=I_curvPolygs_ORIG_FID, zone_field=output_value_2_, in_value_raster=Extract_Minu1, out_table=ZonalHi_curvPol_elev, out_graph=Output_graph_name_2_, zones_as_rows="ZONES_AS_FIELDS")
    #.save(Zonal_Histogram_2_)

    # Process: Summary Statistics (Summary Statistics) (analysis)
    ZonalHi_curvPol1_View_Statis = os.path.join(scratch, fr"ZonalHi_curvPol1_View_Statis_{Value}.dbf")
    if I_curvPolygs_ORIG_FID and MaxCurv and True_3_ and _0_label and absMinCurv:
        arcpy.analysis.Statistics(in_table=ZonalHi_curvPol2, out_table=ZonalHi_curvPol1_View_Statis, statistics_fields=[[f"ORIG__{str(Value)[:4]}", "SUM"]], case_field=[])
        
    # Process: Get_Field_Value_2_ (Get Field Value) 
    # Get Field Value Utility is not implemented 
    Sum_lt0, = next(row for row in arcpy.da.SearchCursor(ZonalHi_curvPol1_View_Statis,f'SUM_ORIG__'))

    # Process: If Field Exists (2) (If Field Exists) () #  NOT  IMPLEMENTED(in_table=ZonalHi_curvPol_elev, field_test_type="MUST_HAVE_ALL_FIELDS", field=[f"ORIG__{str(Value)[:4]}"])
    if arcpy.ListFields(ZonalHi_curvPol_elev,f"ORIG__{str(Value)[:4]}"): 
        True_4_, False_4_ = [True,False]
    else:
        True_4_, False_4_ = [False,True]
        arcpy.management.Delete([Extract_Conv1, Extract_Extr1, Extract_Minu1, ZonalHi_curvPol2, ZonalHi_curvPol_elev])
        del Extract_Conv1, Extract_Extr1, Extract_Minu1, ZonalHi_curvPol2, ZonalHi_curvPol_elev
        arcpy.management.Delete(ZonalHi_curvPol1)
        del ZonalHi_curvPol1
        return ()

    # Process: Calculate Value (4) (Calculate Value) ()
    if I_curvPolygs_ORIG_FID and MaxCurv and Sum_lt0 and True_3_ and True_4_ and _0_label and absMinCurv:
        label_0curv = label_0curv_Func(ZonalHi_curvPol_elev,Sum_lt0,f"{str(Value)[:4]}")

    # Process: Calculate Value (2) (Calculate Value) ()
    if I_curvPolygs_ORIG_FID and MaxCurv and Sum_lt0 and True_3_ and True_4_ and _0_label and absMinCurv and label_0curv:
        Height = HeightFunc(I_curvPolygs_ORIG_FID,label_0curv)

    # Process: Calculate Field (Calculate Field) (management)
    if I_curvPolygs_ORIG_FID and MaxCurv and Sum_lt0 and True_3_ and True_4_ and _0_label and absMinCurv and label_0curv:
        curvPolygs_2_ = arcpy.management.CalculateField(in_table=I_curvPolygs_ORIG_FID, field="eP_Height", expression=Height, expression_type="PYTHON3", code_block="", field_type=String)[0]

    # Process: Get Count (Get Count) (management)
    #Row_Count = arcpy.management.GetCount(in_rows=curvPolygs)[0]

    # Process: Calculate Value (7) (Calculate Value) ()
    # if I_curvPolygs_ORIG_FID and MaxCurv and Sum_lt0 and True_3_ and True_4_ and _0_label and absMinCurv and curvPolygs_2_ and label_0curv:
        # absMinCurv_2_ = updateHeight(curvPolygs,Value,Height)

    # # Process: If Field Value Is (If Field Value Is) () #  NOT  IMPLEMENTED(in_data=curvPolygs_2_, where_clause=f"OBJECTID = {Row_Count}", invert_where_clause="", selection_condition="IS_EQUAL_TO", count=1, count_min=0, count_max=0)
    # if I_curvPolygs_ORIG_FID and MaxCurv and int(Row_Count) and Sum_lt0 and True_3_ and True_4_ and _0_label and absMinCurv and absMinCurv_2_ and curvPolygs_2_ and label_0curv:
        # if oid==int(Row_Count): 
            # True_121, False_122 = [True,False]
        # else:
            # True_121, False_122 = [False,True]

    # Garbage collection to prevent schema locks (-DSM)
    arcpy.management.Delete([Extract_Conv1, Extract_Extr1, Extract_Minu1, ZonalHi_curvPol2, ZonalHi_curvPol_elev])
    del Extract_Conv1, Extract_Extr1, Extract_Minu1, ZonalHi_curvPol2, ZonalHi_curvPol_elev
    arcpy.management.Delete([ZonalHi_curvPol1, ZonalHi_curvPol1_View_Statis])
    del ZonalHi_curvPol1, ZonalHi_curvPol1_View_Statis

    # # Process: Stop (Stop) ()
    # if I_curvPolygs_ORIG_FID and MaxCurv and int(Row_Count) and Sum_lt0 and True_3_ and True_4_ and _0_label and absMinCurv and absMinCurv_2_ and label_0curv:#and curvPolygs_2_ 
        # Continue = breakloopfnc(in_values=[True_121], condition="TRUE")
        # if ( Continue ):
            # break

    return (Value, Height)#True_121 #

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=scratch, workspace=scratch):
        ZonHistIterator(*argv[1:])
