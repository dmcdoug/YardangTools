# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2021-10-11 14:37:15
"""
import arcpy, os
from sys import argv

YardangTools = arcpy.AddToolbox(os.path.join(os.path.dirname(__file__),"Yardangtools2.tbx"))
#from YardangTools.WatershedsModel import WatershedsModel

Watersheds_optional_ = arcpy.GetParameterAsText(1)
Workspace = arcpy.GetParameterAsText(2)
DTM = arcpy.GetParameterAsText(3)
Fill_Z_Limit = arcpy.GetParameterAsText(4)
Flow_Accumulation_Threshold = arcpy.GetParameterAsText(5)

def DataExistsIfThenElse_mb(in_data, data_type):
  try:
    arcpy.Describe(in_data, data_type)
    return (True,False)
  except:
    return (False,True)

def a(b,c,d,e):
    if b: #=="true":
	    return d
    elif c: #=="true":
	    return e

def CheckWatershedsExist(Watersheds, Watersheds_optional_, Workspace, DTM, Fill_Z_Limit, Flow_Accumulation_Threshold):  # CheckWatershedsExist

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")
    arcpy.CheckOutExtension("3D")


    # Process: If Data Exists (If Data Exists) ()
    True_8, False_9 = DataExistsIfThenElse_mb(in_data=Watersheds_optional_, data_type="ANY")

    # Process: WatershedsModel (WatershedsModel) (Default)
    Watersheds_2_ = fr"{Workspace}\Watersheds"
    if False_9:
        YardangTools.WatershedsModel(DTM=DTM, Fill_Z_Limit=Fill_Z_Limit, Workspace=Workspace, RasterT_Watersh3_Union1=Watersheds_2_, Flow_Accumulation_Threshold=Flow_Accumulation_Threshold)
        
        # Process: Calculate Value (Calculate Value) ()
    Watersheds = a(True_8,False_9,Watersheds_optional_,Watersheds_2_)
    
    arcpy.AddMessage(str(Watersheds))
    arcpy.SetParameter(0,str(Watersheds))

    return Watersheds

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=argv[2], workspace=argv[2]):
        CheckWatershedsExist(*argv[1:])
