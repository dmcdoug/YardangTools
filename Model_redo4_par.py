# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2021-06-03 14:39:00
"""
import arcpy
from sys import argv
#def #  NOT  IMPLEMENTED# Function Body not implemented

# Disable large xml log files for each shapefile. Requires ArcGIS Pro >10.8
try:
    if arcpy.GetLogMetadata():
        arcpy.SetLogMetadata(False)
    if arcpy.GetLogHistory():
        arcpy.SetLogHistory(False)
except:
        ''

def Model1211(Input_Raster, seedpoint, elevPolyg_3_, Scratch, Watersheds):  # Model_redo4

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")

    Field = "ORIG_FID"
    Input_false_raster_or_constant_value = 1
    String_2_ = "Long"

    # Process: Get_Field_Value_3_ (Get Field Value) 
    # Get Field Value Utility is not implemented 
    Field_Value, = next(row for row in arcpy.da.SearchCursor(seedpoint,Field))

    # Process: Calculate Value (Calculate Value) ()
    if Field_Value:
        output_value_2_ = rf"{Field} = {Field_Value}"

    # Process: Select (Select) (analysis)
    Watersheds_Select = fr"{Scratch}\Watersheds_Select.shp"
    if Field_Value:
        arcpy.analysis.Select(in_features=Watersheds, out_feature_class=Watersheds_Select, where_clause=output_value_2_)
        
    # # Process: Make Feature Layer (Make Feature Layer) (management)
    # Watershed_Layer = "watershed_"+str(Field_Value)
    # arcpy.management.MakeFeatureLayer(in_features=Watersheds, out_layer=Watershed_Layer, where_clause=f"{Field} = {Field_Value}", workspace="", field_info="")

    # Process: Extract by Mask (Extract by Mask) (sa)
    extract = fr"{Scratch}\extract.tif"
    Extract_by_Mask = extract
    if Field_Value:
        extract = arcpy.sa.ExtractByMask(in_raster=Input_Raster, in_mask_data=Watersheds_Select)
        extract.save(Extract_by_Mask)


    # Process: Get_Field_Value_2_ (Get Field Value) 
    # Get Field Value Utility is not implemented 
    Value_3_, = next(row for row in arcpy.da.SearchCursor(seedpoint,'eP_Height'))
    
    # Process: Con
    if Field_Value:
        Con_convcurv1_tif = arcpy.sa.Con(in_conditional_raster=extract, in_true_raster_or_constant=1, in_false_raster_or_constant="", where_clause=fr'VALUE >= {Value_3_}')
        Con_convcurv1_tif.save()

    # # Process: Greater Than Equal (Greater Than Equal) (ia)
    # Greater_extr1 = fr"{Scratch}\Greater_extr1.tif"
    # Greater_Than_Equal = Greater_extr1
    # if Field_Value:
        # Greater_extr1 = arcpy.ia.GreaterThanEqual(in_raster_or_constant1=extract, in_raster_or_constant2=Value_3_)
        # Greater_extr1.save(Greater_Than_Equal)


    # # Process: Set Null (Set Null) (sa)
    # SetNull_Grea3 = fr"{Scratch}\SetNull_Grea3.tif"
    # Set_Null = SetNull_Grea3
    # if Field_Value:
        # SetNull_Grea3 = arcpy.sa.SetNull(in_conditional_raster=Greater_extr1, in_false_raster_or_constant=Input_false_raster_or_constant_value, where_clause="Value = 0")
        # SetNull_Grea3.save(Set_Null)


    # Process: Raster to Polygon (Raster to Polygon) (conversion)
    r2p_Greater_extr = elevPolyg_3_
    if Field_Value:
        # with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPolygon(in_raster=Con_convcurv1_tif, out_polygon_features=r2p_Greater_extr, simplify="NO_SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

    # Process: Calculate Field (Calculate Field) (management)
    if Field_Value:
        arcpy.management.CalculateField(in_table=r2p_Greater_extr, field=Field, expression=Field_Value, expression_type="PYTHON3", code_block="", field_type=String_2_)[0]
        arcpy.management.CalculateField(in_table=r2p_Greater_extr, field='ep_Height', expression=Value_3_, expression_type="PYTHON3", code_block="", field_type='Double')[0]

    # Process: If Row Count Is (If Row Count Is) ()#True_257, False_258 = #  NOT  IMPLEMENTED(in_layer_or_view=elevPolyg_3_, count_condition="IS_GREATER_THAN", count=1, count_min=0, count_max=0)
    if Field_Value:
        numPolygs = int(arcpy.management.GetCount(r2p_Greater_extr).getOutput(0))
        if numPolygs>1:
            True_257, False_258 = [True,False]
        elif numPolygs==1:
            True_257, False_258 = [False,True]
        else: # handles hirise dtm errors associated with shadows
            True_257, False_258 = [False,False]

    # Process: Near (Near) (analysis)
    if Field_Value and True_257:
        xytabletopoint_CopyFeatures = arcpy.analysis.Near(in_features=seedpoint, near_features=[r2p_Greater_extr], search_radius="", location="NO_LOCATION", angle="NO_ANGLE", method="PLANAR", field_names=[["NEAR_FID", "NEAR_FID"]])[0]
    elif Field_Value and False_258:
        arcpy.management.AddFields(seedpoint,[["NEAR_FID", "LONG", None, None, 0, ''],["NEAR_DIST", "DOUBLE", None, None, 0, '']])
    # Process: Calculate Field (Calculate Field) (management)
    if Field_Value and (True_257 or False_258):
        arcpy.management.CalculateField(in_table=r2p_Greater_extr, field='Id', expression="!FID!", expression_type="PYTHON3", code_block="", field_type=String_2_)[0]
        
    # # Process: Get_Field_Value (Get Field Value) 
    # # Get Field Value Utility is not implemented 
    # if Field_Value and True_257:
        # Value, = next(row for row in arcpy.da.SearchCursor(seedpoint,"NEAR_FID"))

    # # Process: Make Feature Layer (Make Feature Layer) (management)
    # elevPolyg_Layer = "elevPolyg_Layer"
    # if Field_Value and True_257 and Value:
        # arcpy.management.MakeFeatureLayer(in_features=r2p_Greater_extr, out_layer=elevPolyg_Layer, where_clause=f"FID <> {Value}", workspace="", field_info="Shape Shape VISIBLE NONE;OBJECTID OBJECTID VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE;ID ID VISIBLE NONE;GRIDCODE GRIDCODE VISIBLE NONE")

    # # Process: Delete Features (Delete Features) (management)
    # if Field_Value and True_257 and Value:
        # Output_Feature_Class = arcpy.management.DeleteFeatures(in_features=elevPolyg_Layer)[0]
        
    # Garbage collection to prevent schema locks (-DSM)
    if Field_Value: # and Value:
        arcpy.management.Delete([Watersheds_Select, extract, Con_convcurv1_tif])
        del Watersheds_Select, extract, Con_convcurv1_tif
        if not True_257 and not False_258: # handles hirise dtm errors associated with shadows
            arcpy.management.Delete([elevPolyg_3_, seedpoint])
            del elevPolyg_3_, seedpoint
        
    return (Field_Value, numPolygs)

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=argv[4], workspace=argv[4]):
        Model1211(*argv[1:])
